@layout Layouts.AdminLayout
@page "/admin/jadwal"

@inject IVersionProvider VersionProvider
@inject ApplicationDbContext dbcontext

<div style="display: flex; justify-content:space-between">
    <Heading Size="HeadingSize.Is4" Margin="Margin.Is3.FromBottom">Data Jadwal</Heading>
    <Button Color="Color.Primary" Clicked="@NewModal">Tambah</Button>
</div>
<DataGrid TItem="Jadwal" Data="@Jadwals" ReadData="@OnReadData" TotalItems="@totalJadwals" PageSize="10" ShowPager
    Responsive>
    <DataGridColumn Caption="No">
        <DisplayTemplate>
            @context.Id.ToString().
        </DisplayTemplate>
    </DataGridColumn>
    <DataGridColumn Caption="Cabor" >
        <DisplayTemplate>
            @context.Cabor.Nama
        </DisplayTemplate>
    </DataGridColumn>
    <DataGridColumn  Caption="Venue">
        <DisplayTemplate>
            @context.Venue.Nama
        </DisplayTemplate>
    </DataGridColumn>
    <DataGridColumn Field="@nameof(Jadwal.EndDate)" Caption="Mulai"  />
    <DataGridColumn Field="@nameof(Jadwal.EndDate)" Caption="Selesai"  />
    <DataGridColumn Field="@nameof(Jadwal.Keterangan)" Caption="Keterangan"  />
    <DataGridColumn Width="150px" Caption="Aksi">
        <DisplayTemplate>
            <Icon class="btn btn-outline-warning" Name="IconName.Edit" Clicked="@(()=> EditModal(context))" />
            <Icon class="btn btn-outline-danger" Name="IconName.Delete" Clicked="@(()=> Delete(context))" />
        </DisplayTemplate>
    </DataGridColumn>
</DataGrid>

<Modal @ref="modalRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Tambah/Edit Jadwal</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>Cabang Olah Raga</FieldLabel>
                <Select TValue="int" @bind-SelectedValue="@selectedCabor">
                    <SelectItem Value="0">None</SelectItem>
                    @foreach (var cabor in cabors)
                    {
                        <SelectItem Value="@cabor.Id">@cabor.Nama</SelectItem>
                    }
                </Select>
            </Field>
            <Field>
                <FieldLabel>Venue</FieldLabel>
                <Select TValue="int" @bind-SelectedValue="@selectedVenue">
                    <SelectItem Value="0">None</SelectItem>
                    @foreach (var venue in venues)
                    {
                        <SelectItem Value="@venue.Id">@venue.Nama</SelectItem>
                    }
                </Select>
            </Field>
            <Field>
                <FieldLabel>Mulai</FieldLabel>
                <DateEdit @bind-Date="@model.StartDate" Placeholder="Mulai" />
            </Field>
            <Field>
                <FieldLabel>Selesai</FieldLabel>
                <DateEdit @bind-Date="@model.EndDate" Placeholder="Selesai" />
            </Field>
            <Field>
                <FieldLabel>Keterangan</FieldLabel>
                <MemoEdit @bind-Text="@model.Keterangan" Placeholder="Keterangan" />
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Batal</Button>
            <Button Color="Color.Primary" Clicked="@Save">Simpan</Button>
        </ModalFooter>
    </ModalContent>
</Modal>


@code {
    [Inject] IMessageService MessageService { get; set; }
    private Modal modalRef;

    Jadwal model = new Jadwal();
    
    private int selectedCabor;
    private int selectedVenue;
    private List<Jadwal> Jadwals;
    private IEnumerable<Cabor> cabors;
    private IEnumerable<Venue> venues;
    protected override async Task OnInitializedAsync()
    {
        cabors = dbcontext.DataCabor.ToList();
        venues = dbcontext.DataVenue.ToList();
        Jadwals = await dbcontext.DataJadwal.Include(x=>x.Cabor).Include(x=>x.Venue).ToListAsync();
        await base.OnInitializedAsync();
    }

    private int totalJadwals;


    private async Task OnReadData(DataGridReadDataEventArgs<Jadwal> e)
    {
        if (!e.CancellationToken.IsCancellationRequested)
        {
            List<Jadwal> response = null;

            // this can be call to anything, in this case we're calling a fictional api
            //var response = await Http.GetJsonAsync<Jadwal[]>( $"some-api/Jadwals?page={e.Page}&pageSize={e.PageSize}" );
            if (e.ReadDataMode is DataGridReadDataMode.Virtualize)
                response = await dbcontext.DataJadwal.Skip(e.VirtualizeOffset).Take(e.VirtualizeCount).ToListAsync();
            else if (e.ReadDataMode is DataGridReadDataMode.Paging)
                response = await dbcontext.DataJadwal.Skip((e.Page - 1) * e.PageSize).Take(e.PageSize).ToListAsync();
            else
                throw new Exception("Unhandled ReadDataMode");

            if (!e.CancellationToken.IsCancellationRequested)
            {
                totalJadwals = await dbcontext.DataJadwal.CountAsync();
                Jadwals = new List<Jadwal>(response); // an actual data for the current page
            }
        }
    }



    private Task NewModal()
    {
        model = new Jadwal();
        return modalRef.Show();
    }

    private Task HideModal()
    {
        return modalRef.Hide();
    }
    private Task EditModal(Jadwal data)
    {
        model = data;
        selectedVenue = data.Venue.Id;
        selectedCabor = data.Cabor.Id;
        return modalRef.Show();
    }

    private async Task Save()
    {
        try
        {
            if (model.Id <= 0)
            {
                model.Cabor = cabors.SingleOrDefault(x=>x.Id==selectedCabor);    
                model.Venue = venues.SingleOrDefault(x=>x.Id==selectedVenue);    

                dbcontext.Entry(model.Cabor).State = EntityState.Unchanged;
                dbcontext.Entry(model.Venue).State = EntityState.Unchanged;
                await dbcontext.DataJadwal.AddAsync(model);
                await dbcontext.SaveChangesAsync();
                Jadwals.Add(model);
            }
            else
            {
                await dbcontext.SaveChangesAsync();
            }
            await modalRef.Hide();
        }
        catch (System.Exception ex)
        {
            await MessageService.Error(ex.Message);
        }
    }


    private async Task Delete(Jadwal model)
    {
        if (await MessageService.Confirm("Yakin Hapus Data ?", "Delete"))
        {
            dbcontext.DataJadwal.Remove(model);
            await dbcontext.SaveChangesAsync();
            Jadwals.Remove(model);
        }
    }
}
